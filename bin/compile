#!/usr/bin/env bash

indent() {
    sed -u 's/^/       /'
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

installAwsCli() {
    AWS_CLI_URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
    BUILD_DIR=$2
    BUILDPACK_DIR="$(dirname $(dirname $1))"
    PATH_DIR="/app"
    INSTALL_DIR="$PATH_DIR/.awscli"
    TMP_DIR=$(mktemp -d)

    cd $BUILD_DIR

    echo "-----> Downloading AWS CLI"
    curl --silent --show-error --fail -o "${TMP_DIR}/awscliv2.zip" "${AWS_CLI_URL}" |& indent
    unzip -qq -d "${TMP_DIR}" "${TMP_DIR}/awscliv2.zip" |& indent

    mkdir -p "${BUILD_DIR}/.awscli"

    # The AWS installer creates symlinks that use absolute paths, as such the install
    # location must match the location from which the CLI is eventually run.
    # At runtime the app will be run from /app, however at build time $BUILD_DIR is
    # typically a path under /tmp (unless a Heroku CI build, in which case it's /app).
    # In order to make all cases work, we have to create a symlink from /app to $BUILD_DIR,
    # so that we can use `/app` paths for the installer, so that the symlinks it creates
    # will use /app paths. A symlink is used instead of file copying to improve build times.
    if [[ "${BUILD_DIR}" != /app ]]; then
        ln -nsf "${BUILD_DIR}" "${PATH_DIR}"
        ln -nsf "${BUILD_DIR}/.awscli" "${INSTALL_DIR}"
    fi

    mkdir -p $PATH_DIR/custom-bin
    mkdir -p $PATH_DIR/.profile.d
    mkdir -p "${INSTALL_DIR}"

    echo "-----> Installing AWS CLI"

    "${TMP_DIR}/aws/install" --install-dir "${INSTALL_DIR}" --bin-dir "${PATH_DIR}/custom-bin"

    $PATH_DIR/custom-bin/aws --version

    ln -s $PATH_DIR/.awscli/v2/current/bin/aws $BUILD_DIR/custom-bin/aws

    echo "-----> Exporting PATH"

    echo "export PATH=$PATH:$HOME/custom-bin" >> $BUILD_DIR/.profile.d/aws_binaries.sh

    rm -rf "${TMP_DIR}"

    echo "-----> Successfully installed AWS CLI"
}

installHelm() {
    if [ ! -s "${BUILD_DIR}/.helm_version" ]; then
        echo ".helm_version empty. Skipping."
    else
        mkdir custom-bin
        mkdir -p .profile.d

        HELM_VERSION=`cat ${BUILD_DIR}/.helm_version`
        echo "Downloading helm from https://storage.googleapis.com/kubernetes-helm/helm-$HELM_VERSION-linux-amd64.tar.gz"
        wget https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O- | tar -xz --strip 1 linux-amd64/helm
        mv helm custom-bin

        echo "export PATH=$PATH:$HOME/custom-bin" >> .profile.d/custom_binaries.sh
    fi
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

APP_DIR=$(cat "${ENV_DIR}/APP_DIR")
INSTALL_HELM=$(cat "${ENV_DIR}/INSTALL_HELM")

if [[ -z "${APP_DIR}" ]]; then
    echo "APP_DIR was not set. Aborting" | indent
    exit 1
fi

cp "${BUILD_DIR}/${APP_DIR}/Procfile" "${BUILD_DIR}/Procfile"

if ! [ $? ]; then
    echo "FAILED to copy a Procfile" | indent
    exit 1
fi

echo "Copied ${APP_DIR} Procfile successfully" | indent

if [[ -f "${BUILD_DIR}/${APP_DIR}/app.json" ]]; then
    cp "${BUILD_DIR}/${APP_DIR}/app.json" "${BUILD_DIR}/app.json"
    echo "Copied ${APP_DIR}/app.json as app.json successfully" | indent
fi

if [[ -f "${BUILD_DIR}/${APP_DIR}/package.main.json" ]]; then
    cp "${BUILD_DIR}/${APP_DIR}/package.main.json" "${BUILD_DIR}/package.json"
    echo "Copied ${APP_DIR}/package.main.json as package.json successfully" | indent
fi

if [[ -f "${BUILD_DIR}/${APP_DIR}/release.sh" ]]; then
    cp "${BUILD_DIR}/${APP_DIR}/release.sh" "${BUILD_DIR}/release.sh"
    echo "Copied ${APP_DIR}/release.sh as release.sh successfully" | indent
fi

if [[ -f "${BUILD_DIR}/${APP_DIR}/cleanup.sh" ]]; then
    cp "${BUILD_DIR}/${APP_DIR}/cleanup.sh" "${BUILD_DIR}/cleanup.sh"
    echo "Copied ${APP_DIR}/cleanup.sh as cleanup.sh successfully" | indent
fi

if [[ $INSTALL_HELM == "true" ]]; then
    installHelm
fi

if [[ $APP_DIR == "server" ]]; then
    installAwsCli $0 $1
 fi
